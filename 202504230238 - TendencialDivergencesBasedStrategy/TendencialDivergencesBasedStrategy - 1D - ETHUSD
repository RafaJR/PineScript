//@version=5
strategy("TendencialDivergencesBasedStrategy", shorttitle="TendencialDivergencesBasedStrategy", overlay=true, pyramiding=0,
         calc_on_order_fills=false, commission_type=strategy.commission.percent,
         commission_value=0.1, default_qty_type=strategy.percent_of_equity, default_qty_value=100,
         initial_capital=1000, currency=currency.USD)

// 1D - ETHEREUM ALL TIME HISTORY INDEX

// StopLoss / TakeProffit percents
stopLossPercent = input.float(defval=2.2, title="Static Stop Loss Percent (%)", step=0.1, group="Risk control")
takeProfitPercent = input.float(defval=34.5, title="Static Take Profit Percent (%)", step=0.1, group="Risk control")

// Jurik Moving Average
length = input.int(title="Length", defval=6, minval=1)
phase = input.int(title="Phase", defval=50, minval=-100, maxval=100)
power = input.int(title="Power", defval=2, minval=1)
src = input.source(defval=close, title="Source")

var color bullishColor = #00ff08
var color bearishColor = #ff0404

// phaseRatio - beta - alpha
phaseRatio = phase < -100 ? 0.5 : phase > 100 ? 2.5 : phase / 100 + 1.5
beta = 0.45 * (length - 1) / (0.45 * (length - 1) + 2)
alpha = math.pow(beta, power)

// Calculation vars
var float jma = na
var float e0 = na
var float e1 = na
var float e2 = na

// Jurik Moving Average calculation
e0 := (1 - alpha) * src + alpha * nz(e0[1])
e1 := (src - e0) * (1 - beta) + beta * nz(e1[1])
e2 := (e0 + phaseRatio * e1 - nz(jma[1])) * math.pow(1 - alpha, 2) + math.pow(alpha, 2) * nz(e2[1])
jma := e2 + nz(jma[1])

// jma stats and colors
jmaColor = color.white

bool trendIsBullish = jma > jma[1]
bool trendIsBearish = jma < jma[1]

// Plotting
// JMA ploting
if trendIsBullish
    jmaColor := bullishColor
else if trendIsBearish
    jmaColor := bearishColor

var jmaPlot = plot(jma, title="JMA", linewidth=1, color=color.new(jmaColor, 0))

// High prizes Jurik Moving Average
srcHigh = high

var float jmaHigh = na
var float e0High = na
var float e1High = na
var float e2High = na

e0High := (1 - alpha) * srcHigh + alpha * nz(e0High[1])
e1High := (srcHigh - e0High) * (1 - beta) + beta * nz(e1High[1])
e2High := (e0High + phaseRatio * e1High - nz(jmaHigh[1])) * math.pow(1 - alpha, 2) + math.pow(alpha, 2) * nz(e2High[1])
jmaHigh := e2High + nz(jmaHigh[1])

// JMA High dynamic colors
jmaHighColor = color.white
if jmaHigh > jmaHigh[1]
    jmaHighColor := bullishColor
else if jmaHigh < jmaHigh[1]
    jmaHighColor := bearishColor

plotjmaHigh = plot(jmaHigh, title="JMA High", linewidth=1, color=color.new(jmaHighColor, 0))

// Low prizes Jurik prizes averange
srcLow = low

var float jmaLow = na
var float e0Low = na
var float e1Low = na
var float e2Low = na

e0Low := (1 - alpha) * srcLow + alpha * nz(e0Low[1])
e1Low := (srcLow - e0Low) * (1 - beta) + beta * nz(e1Low[1])
e2Low := (e0Low + phaseRatio * e1Low - nz(jmaLow[1])) * math.pow(1 - alpha, 2) + math.pow(alpha, 2) * nz(e2Low[1])
jmaLow := e2Low + nz(jmaLow[1])

// JMA low prizes dynamic colors
jmaLowColor = color.white
if jmaLow > jmaLow[1]
    jmaLowColor := bullishColor
else if jmaLow < jmaLow[1]
    jmaLowColor := bearishColor

plotJmaLow = plot(jmaLow, title="JMA Low", linewidth=1, color=color.new(jmaLowColor, 0))

// Fill the space between the Jurik moving averages of high prices (jmaHigh) and close prices (jma)
color fillColor = na

// Evaluate the colors of the Jurik moving averages
if jmaHighColor == bullishColor and jmaColor == bullishColor
    fillColor := color.new(bullishColor, 90)  // Green transparent
else if jmaHighColor == bearishColor and jmaColor == bearishColor
    fillColor := color.new(bearishColor, 90)  // Red transparent
else
    fillColor := color.new(color.black, 100)  // Black fully transparent

// Use the `fill` function to paint the area between the moving averages
fill(plot1=plotjmaHigh, plot2=jmaPlot, color=fillColor, transp=0)