//@version=5
strategy(title="ParabolicSARStrategy", shorttitle="ParabolicSARStrategy", overlay=true, pyramiding=0, calc_on_order_fills=false, commission_type=strategy.commission.percent, commission_value=0.1, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=100, currency=currency.USD)

// 1D - ETHEREUM ALL TIME HISTORY INDEX

// Colors for both moving averages
colorLong = #00ff08  // Green for bullish movements
colorShort = #ff0000 // Red for bearish movements
fillColorLong = color.new(colorLong, 70)
fillColorShort = color.new(colorShort, 70)
fillBullishDivergenceColor = color.new(colorLong, 90)
fillBearishDivergenceColor = color.new(colorShort, 90)
hidden = color.new(color.black, 100)

// General inputs
source = input.source(close, title="Prize data source", group="General configuration", group="General")
// SAR inputs
start = input.float(0.02, title="Start", group="SAR")
increment = input(0.02, title="Increment", group="SAR")
maximum = input(0.2, "Max Value", title="Maximun", group="SAR")
// EMA inputs
slowEmaPeriod = input.int(200, title="Media m√≥bi lenta", minval=1, step=10, inline="Slow EMA", group="EMA")

// StopLoss / TakeProffit percents
stopLossPercent = input(1, title="Porcentaje de Stop Loss (%)", group="Risk control")
takeProfitPercent = input(10, title="Porcentaje de Take Profit (%)", group="Risk control")
// Prize support or resisteance magin
srMargin = input.float(5, title = "Prize support or resisteance magin", group="Risk control")

//***************************************************************************************************************************************************************
// General funtions
//***************************************************************************************************************************************************************


//***************************************************************************************************************************************************************
// Chart calculations (SAR, EMAs, Top prizes)
//***************************************************************************************************************************************************************
out = ta.sar(start, increment, maximum)

// SAR indicates a Bullish trend
sarIsBullish = out < source
// SAR Indicates a Bearish trend
sarIsBearish = out > source
// Setting the SAR Color according to trend
sarColor = sarIsBearish ?  colorShort : colorLong
// A new SAR tendence just started
sarBecomeBearish = sarIsBearish and out[1] < source[1]
sarBecomeBullish = sarIsBullish and out[1] > source[1]

slowEma = ta.wma(source, slowEmaPeriod)
slowEmaIsBullish = slowEma < source
slowEmaIsBearish = slowEma > source
emaColor = slowEmaIsBullish ? colorLong : colorShort

prizeIsBullish = sarIsBullish and slowEmaIsBullish
prizeIsBearish = sarIsBearish and slowEmaIsBearish
prizeIsBullishDivergent = slowEmaIsBullish and sarIsBearish
prizeIsBearishDivergent = slowEmaIsBearish and sarIsBullish

//***************************************************************************************************************************************************************
// Top prices calculation
//***************************************************************************************************************************************************************

// Vars to calculate the current highest ant lowest at each SAR by updating in each candle
var float currentHighest = -1e10
var float currentLowest = 1e10
// Vars to calculate the current hightest and lowest index prize.
var int currentHighestIndex = 0
var int currentLowestIndex = 0
// Vars to save the last 2 hightest and lowest fractals happened into SAR waves.
var lastHighFractal = array.new_float(2,-1e10)
var lastLowFractal = array.new_float(2, 1e10)

// Highest prizes on SAR Bullish waves calculation
if(sarIsBullish and not sarBecomeBullish)
    currentHighest := math.max(high, currentHighest)
    currentHighestIndex := currentHighest == high ? bar_index : currentHighestIndex
else if(sarIsBullish and sarBecomeBullish)
    currentHighest :=  high
    currentHighestIndex := bar_index
// Lowest prizes on SAR Bearish waves calculation
if(sarIsBearish and not sarBecomeBearish)
    currentLowest := math.min(low, currentLowest)
    currentLowestIndex := currentLowest == low ? bar_index: currentLowestIndex
else if(sarIsBearish and sarBecomeBearish)
    currentLowest := low
    currentLowestIndex := bar_index

// When a new bearish SAR wave start, it's the moment to update the previous bullish wave fractals
if (sarBecomeBearish)
    array.set(lastHighFractal, 0,array.get(lastHighFractal, 1))
    array.set(lastHighFractal, 1, currentHighest)
    label.new(x=currentHighestIndex, y=currentHighest, text=str.tostring(array.get(lastHighFractal, 1)), style=label.style_label_down, color=fillColorShort, textcolor=color.white, size = size.small)
// When a new bullish SAR wave start, it's the moment to update the previous bearish wave fractals
if(sarBecomeBullish)
    array.set(lastLowFractal, 0, array.get(lastLowFractal, 1))
    array.set(lastLowFractal, 1, currentLowest)
    label.new(x=currentLowestIndex, y=currentLowest, text=str.tostring(array.get(lastLowFractal, 1)), style=label.style_label_up, color=fillColorLong, textcolor=color.white, size = size.small)

//***************************************************************************************************************************************************************
// Chart printing
//***************************************************************************************************************************************************************

sarPlot = plot(out, "ParabolicSAR", style=plot.style_stepline, color=sarColor)
sourcePlot = plot(source, "ParabolicSAR", color=hidden)
emaPlot = plot(slowEma, "EMA", color=emaColor, linewidth=2)

fillColor = prizeIsBullish ? fillColorLong : prizeIsBearish ? fillColorShort : prizeIsBullishDivergent ? fillBullishDivergenceColor : fillBearishDivergenceColor
fill(sarPlot, sourcePlot, fillColor, fillgaps=true)

//***************************************************************************************************************************************************************
// Operation orders
//***************************************************************************************************************************************************************
var bool killLongEntry = false
var bool killShortEntry = false
var bool longEntry = false
var bool shortEntry = false

