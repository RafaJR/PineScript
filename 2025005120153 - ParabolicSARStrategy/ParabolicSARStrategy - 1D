//@version=5
strategy(title="ParabolicSARStrategy", shorttitle="ParabolicSARStrategy", overlay=true, pyramiding=0, calc_on_order_fills=false, commission_type=strategy.commission.percent, commission_value=0.1, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=100, currency=currency.USD)

// 1D - Kraken - Ethereum / U.S. Dollar

// Colors for both moving averages
colorLong = #00ff08  // Green for bullish movements
colorShort = #ff0000 // Red for bearish movements
fillColorLong = color.new(colorLong, 70)
fillColorShort = color.new(colorShort, 70)
fillBullishDivergenceColor = color.new(colorLong, 90)
fillBearishDivergenceColor = color.new(colorShort, 90)
hidden = color.new(color.black, 100)

// General inputs
source = input.source(defval=close, title="Prize data source", group="General configuration")
maxFractals = input.int(defval=20, minval=2, maxval=50, title="Max fractals storage", group="General configuration")
maxSRLimits = input.int(defval=20, minval=2, maxval=50, title="Max support/resisteance limits", group="General configuration")
// SAR inputs
start = input.float(defval=0.02, title="Start", group="SAR")
increment = input(defval=0.02, title="Increment", group="SAR")
maximum = input(defval=0.2, title="Maximun", group="SAR")
// EMA inputs
slowEmaPeriod = input.int(defval=24, title="Media m√≥bil lenta", minval=1, step=1, inline="Slow EMA", group="EMA")

// StopLoss / TakeProffit percents
stopLossPercent = input.int(defval=1, title="Porcentaje de Stop Loss (%)", group="Risk control", step=1)
takeProfitPercent = input.int(defval=10, title="Porcentaje de Take Profit (%)", group="Risk control", step=1)
// Prize support or resisteance magin
srMargin = input.float(defval=5, title = "Prize support or resisteance magin", group="Risk control")

// Time parameters for testing
currentYear = input.int(2015, title="Year", step=1, group = "Time")
currentMonth = input.int(defval=1, title="Month", step=1, group = "Time")

// Volume parameters
volumeFactor = input.float(defval=14.5, title="Volume factor", group="Volume", step=0.1)

//***************************************************************************************************************************************************************
// General funtions
//***************************************************************************************************************************************************************


//***************************************************************************************************************************************************************
// Chart calculations (SAR, EMAs, Top prizes)
//***************************************************************************************************************************************************************
out = ta.sar(start, increment, maximum)

// SAR indicates a Bullish trend
sarIsBullish = out < source
// SAR Indicates a Bearish trend
sarIsBearish = out > source
// Setting the SAR Color according to trend
sarColor = sarIsBearish ?  colorShort : colorLong
// A new SAR tendence just started
sarBecomeBearish = sarIsBearish and out[1] < source[1]
sarBecomeBullish = sarIsBullish and out[1] > source[1]

slowEma = ta.wma(source, slowEmaPeriod)
slowEmaIsBullish = slowEma < source
slowEmaIsBearish = slowEma > source
emaColor = slowEmaIsBullish ? colorLong : colorShort

prizeIsBullish = sarIsBullish and slowEmaIsBullish
prizeIsBearish = sarIsBearish and slowEmaIsBearish
prizeIsBullishDivergent = slowEmaIsBullish and sarIsBearish
prizeIsBearishDivergent = slowEmaIsBearish and sarIsBullish

//***************************************************************************************************************************************************************
// Top prices calculation
//***************************************************************************************************************************************************************
// Vars to calculate the current highest ant lowest at each SAR by updating in each candle
var float currentHighest = -1e10
var float currentLowest = 1e10
// Vars to calculate the current hightest and lowest index prize.
var int currentHighestIndex = 0
var int currentLowestIndex = 0
// Vars to save the last 2 hightest and lowest fractals happened into SAR waves.
var lastHighIndexFractal = array.new_int(0)
var lastLowIndexFractal = array.new_int(0)
// Maps to link the a fractal index with it's Value
var mapLastHighFractal = map.new<int, float>()
var mapLastLowFractal = map.new<int, float>()

// Highest prizes on SAR Bullish waves calculation
if(sarIsBullish and not sarBecomeBullish)
    currentHighest := math.max(high, currentHighest)
    if(currentHighest == high)
        currentHighestIndex := bar_index
else if(sarIsBullish and sarBecomeBullish)
    currentHighest :=  high
    currentHighestIndex := bar_index
// Lowest prizes on SAR Bearish waves calculation
if(sarIsBearish and not sarBecomeBearish)
    currentLowest := math.min(low, currentLowest)
    if(currentLowest == low)
        currentLowestIndex := bar_index
else if(sarIsBearish and sarBecomeBearish)
    currentLowest := low
    currentLowestIndex := bar_index

// When a new bearish SAR wave start, it's the moment to update the previous bullish wave fractals
if (sarBecomeBearish)
    // If the max fractal storage is reached, the first fractal is removed to place a new one
    if(mapLastHighFractal.size() == maxFractals)
        mapLastHighFractal.remove(lastHighIndexFractal.first())
        lastHighIndexFractal.shift()
    lastHighIndexFractal.push(currentHighestIndex)
    mapLastHighFractal.put(currentHighestIndex, currentHighest)
    label.new(x=lastHighIndexFractal.last(), y=currentHighest, text=str.tostring(mapLastHighFractal.get(currentHighestIndex)), style=label.style_label_down, color=fillColorShort, textcolor=color.white, size = size.small)
if(sarBecomeBullish)
    // If the max fractal storage is reached, the first fractal is removed to place a new one
    if(mapLastLowFractal.size() == maxFractals)
        mapLastLowFractal.remove(lastLowIndexFractal.first())
        lastLowIndexFractal.shift()
    lastLowIndexFractal.push(currentLowestIndex)
    mapLastLowFractal.put(currentLowestIndex, currentLowest)
    label.new(x=lastLowIndexFractal.last(), y=currentLowest, text=str.tostring(mapLastLowFractal.get(currentLowestIndex)), style=label.style_label_up, color=fillColorLong, textcolor=color.white, size = size.small)

//***************************************************************************************************************************************************************
// Support and resisteance limits calculation
//***************************************************************************************************************************************************************
// Arrays to save the founded limit indexes
var arraySupportLimits = array.new_int()
var arrayResisteanceLimits =  array.new_int()

// All indexes of high fractals
arrayHighKeys = mapLastHighFractal.keys()
// Last high fractal index
int lastHighKey = arrayHighKeys.size() -1
// Checking all high fractal values
for int i = 0 to lastHighKey
    // Price of current high fractal
    currentHighPrice = mapLastHighFractal.get(arrayHighKeys.get(i))
    // Comparing current high price with all the high prices
    for int j = i+1 to lastHighKey
        // Next high price to compare with
        toCompareHighPrice = mapLastHighFractal.get(arrayHighKeys.get(j))
        // Comparing prices to find a resisteance
        if(toCompareHighPrice >= currentHighPrice - srMargin and toCompareHighPrice <= currentHighPrice + srMargin)
            // If a resisteance is found, the first high price is saved only the first time
            if(arrayResisteanceLimits.size() == 0)
                arrayResisteanceLimits.push(i)
            // If a resisteance is found, the new value is saved
            arrayResisteanceLimits.push(j)


//***************************************************************************************************************************************************************
// Chart printing
//***************************************************************************************************************************************************************
sarPlot = plot(out, "ParabolicSAR", style=plot.style_stepline, color=sarColor)
sourcePlot = plot(source, "ParabolicSAR", color=hidden)
emaPlot = plot(slowEma, "EMA", color=emaColor, linewidth=2)

fillColor = prizeIsBullish ? fillColorLong : prizeIsBearish ? fillColorShort : prizeIsBullishDivergent ? fillBullishDivergenceColor : fillBearishDivergenceColor
fill(sarPlot, sourcePlot, fillColor, fillgaps=true)

//***************************************************************************************************************************************************************
// Operation orders
//***************************************************************************************************************************************************************
// Entry vars inicialization
var bool killLongEntry = false
var bool killShortEntry = false
var bool longEntry = false
var bool shortEntry = false
var bool operationalBusy = false
tendenceIsStrong = volume > slowEma * volumeFactor

// Entry conditions
longEntry := sarIsBullish and sarBecomeBullish and slowEmaIsBullish and tendenceIsStrong
shortEntry := sarIsBearish and sarBecomeBearish and slowEmaIsBearish and tendenceIsStrong
//longEntry := sarIsBullish and sarBecomeBullish and slowEmaIsBullish
//shortEntry := sarIsBearish and sarBecomeBearish and slowEmaIsBearish
//longEntry := sarIsBullish and sarBecomeBullish
//shortEntry := sarIsBearish and sarBecomeBearish

//plotshape(longEntry, style=shape.triangleup, location=location.belowbar, color=colorLong, size=size.small)
//plotshape(shortEntry, style=shape.triangledown, location=location.abovebar, color=colorShort, size=size.small)
//plotshape(killLongEntry, style=shape.xcross, location=location.abovebar, color=colorLong, size=size.small)
//plotshape(killShortEntry, style=shape.xcross, location=location.belowbar, color=colorShort, size=size.small)

// Time parameters for testing
//if (year == 2025 and month == 1 and dayofmonth >= 6 and dayofmonth <= 7)
//if (year == currentYear and month == currentMonth)
//if (year == currentYear)
if (true)
    // Operation nomenclature variables
    var int longOpCount = 0
    var int shortOpCount = 0
    var string longOpName = ""
    var string shortOpName = ""

    if(killLongEntry)
        strategy.close(id=longOpName)
        operationalBusy := false
    if(killShortEntry)
        strategy.close(id=shortOpName)
        operationalBusy := false
    if (longEntry and not operationalBusy)
        longOpCount += 1
        longOpName := "Long"
        longOpComment = longOpName + str.tostring(longOpCount)
        strategy.entry(id=longOpName, direction=strategy.long, comment=longOpComment)
        stopLossPrize = currentLowest
        //takeProfitPrize = strategy.position_avg_price * (1 + takeProfitPercent / 100)
        //strategy.exit(id=longOpName, from_entry=longOpName, comment=longOpComment, stop=stopLossPrize, limit=takeProfitPrize, comment_profit = "PROFIT" + str.tostring(longOpCount))
        strategy.exit(id=longOpName, from_entry=longOpName, comment=longOpComment, stop=stopLossPrize, comment_profit = "PROFIT" + str.tostring(longOpCount))
        operationalBusy := true
    if (shortEntry and not operationalBusy)
        shortOpCount += 1
        shortOpName := "Short"
        shortOpComment = shortOpName + str.tostring(shortOpCount)
        strategy.entry(id=shortOpName, direction=strategy.short, comment=shortOpComment)
        stopLossPrize = currentHighest
        //takeProfitPrize = strategy.position_avg_price * (1 - takeProfitPercent / 100)
        //strategy.exit(id=shortOpName, from_entry=shortOpName, comment=shortOpComment, stop=stopLossPrize, limit=takeProfitPrize, comment_profit = "PROFIT" + str.tostring(shortOpCount))
        strategy.exit(id=shortOpName, from_entry=shortOpName, comment=shortOpComment, stop=stopLossPrize, comment_profit = "PROFIT" + str.tostring(shortOpCount))
        operationalBusy := true
    if (strategy.position_size == 0)
        operationalBusy := false
    // Stop Loss update
    if (operationalBusy)
        bool isLongActive = strategy.position_size > 0
        bool isShortActive = strategy.position_size < 0

        if (isLongActive and sarIsBullish and sarBecomeBullish)
            strategy.exit(id=longOpName, from_entry=longOpName, stop=currentLowest)
        if(isShortActive and sarIsBearish and sarBecomeBearish)
            strategy.exit(id=shortOpName, from_entry=shortOpName, stop=currentHighest)

