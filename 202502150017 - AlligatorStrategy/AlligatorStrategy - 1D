//@version=5
// Aplicar en temporalidad de 5m
strategy(title="Medias móbiles depurada",
         shorttitle="Estrategia de medias móbiles depurada", overlay = true, pyramiding = 0,
         calc_on_order_fills = false, commission_type =  strategy.commission.percent,
         commission_value = 0.1, default_qty_type = strategy.percent_of_equity, default_qty_value = 100,
         initial_capital=100, currency=currency.USD)

// Parámetros de configuración de la Estrategia
// rsi 21 Standard
var int rsiAverange = input.int(11, title="RSI Averange", group="Indicadores complementarios")
// rsi level 50 standard
var int rsiLevel = input.int(68, title="RSI level", group="Indicadores complementarios")
// adx level 20
var int adxLevel = input.int(31, inline="ADX Level", group="Indicadores complementarios")
var int len_dmi = input.int(26, minval=1, title="DI Length", group="Indicadores complementarios")
// lensig_dmi 14 standard
var int lensig_dmi = input.int(20, title="ADX Smoothing", minval=1, group="Indicadores complementarios")

// Data source
source = input.source(close)

// StopLoss / TakeProffit percents
stopLossPercent = input(1, title="Porcentaje de Stop Loss (%)", group="Risk control")
takeProfitPercent = input(200, title="Porcentaje de Take Profit (%)", group="Risk control")

// EMAs
// Calcular las medias móviles suavizadas
lengthJaw = input.int(13, title="Jaw Length")
offsetJaw = input.int(8, title="Jaw Offset")
lengthTeeth = input.int(8, title="Teeth Length")
offsetTeeth = input.int(5, title="Teeth Offset")
lengthLips = input.int(5, title="Lips Length")
offsetLips = input.int(3, title="Lips Offset")

lips = ta.sma(ta.sma(source, lengthLips), lengthLips)
teeth = ta.sma(ta.sma(source, lengthTeeth), lengthTeeth)
jaw = ta.sma(ta.sma(source, lengthJaw), lengthJaw)

// Pintar las medias móviles con los offsets correspondientes
plot(lips[offsetLips], title="Lips", color=#ffffff, linewidth=1)
plot(teeth[offsetTeeth], title="Teeth", color=#ffffff, linewidth=2)
plot(jaw[offsetJaw], title="Jaw", color=#ffffff, linewidth=3)

// Indicadores adicionales para filtrar señales
// RSI
rsi = ta.rsi(source, rsiAverange)
//plot(rsi, title="RSI", color=color.blue)
// ADX
[diplus, diminus, adx] = ta.dmi(len_dmi, lensig_dmi)

// Variables para la detección de señales de compra/venta o la parada de las mismas.
var bool trendIsBullish = false
var bool trendIsBearish = false
var bool longEntry = false
var bool shortEntry = false

if(teeth > jaw and ta.crossover(lips, teeth))
    trendIsBullish := true
    trendIsBearish := false
if(teeth < jaw and ta.crossunder(lips, teeth))
    trendIsBullish := false
    trendIsBearish := true

longEntry := trendIsBullish and rsi > rsiLevel and adx > adxLevel
shortEntry := trendIsBearish and rsi < rsiLevel and adx > adxLevel

// Variables para establecer nomenclatura de operaciones
var int longOpCount = 0
var int shortOpCount = 0
var string longOpName = ""
var string shortOpName = ""

if (true)
    if (longEntry)
        trendIsBullish := false
        trendIsBearish := false
        longOpCount += 1
        longOpName := "Long" + str.tostring(longOpCount)
        stopLossPrize = source - (source * (stopLossPercent / 100))
        takeProfitPrize = source + (source * (takeProfitPercent / 100))
        strategy.entry(longOpName, strategy.long)
        strategy.exit(longOpName + "Exit", longOpName, stop=stopLossPrize, limit=takeProfitPrize)
    if (shortEntry)
        trendIsBullish := false
        trendIsBearish := false
        shortOpCount += 1
        shortOpName := "Short" + str.tostring(shortOpCount)
        stopLossPrize = source + (source * (stopLossPercent / 100))
        takeProfitPrize = source - (source * (takeProfitPercent / 100))
        strategy.entry(shortOpName, strategy.short)
        strategy.exit(shortOpName + "Exit", shortOpName, stop=stopLossPrize, limit=takeProfitPrize)