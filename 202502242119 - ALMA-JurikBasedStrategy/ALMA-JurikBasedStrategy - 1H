//@version=5
strategy(title="ParabolicSARStrategy", shorttitle="ParabolicSARStrategy", overlay=true, pyramiding=0, calc_on_order_fills=false, commission_type=strategy.commission.percent, commission_value=0.1, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=100, currency=currency.USD)

// Colors for both moving averages
colorLong = #75ff79  // Green for bullish movements
colorShort = #ff7070 // Red for bearish movements

// General inputs
source = input.source(close, title="Prize data source", group="General configuration", group="General")

// SAR inputs
start = input.float(0.02, title="Start", group="SAR")
increment = input(0.02, title="Increment", group="SAR")
maximum = input(0.2, "Max Value", title="Maximun", group="SAR")

// EMA inputs
slowEmaPeriod = input.int(212, title="Media m√≥bi lenta", minval=1, step=10, inline="Slow EMA", group="EMA")

// StopLoss / TakeProffit percents
stopLossPercent = input(1, title="Porcentaje de Stop Loss (%)", group="Risk control")
takeProfitPercent = input(40, title="Porcentaje de Take Profit (%)", group="Risk control")

out = ta.sar(start, increment, maximum)
sarColor = color.white
sarIsBullish = out < close
sarIsBearish = out > close
sarWasBullish = sarIsBearish and out[1] < close[1]
sarWasBearish = sarIsBullish and out[1] > close[1]
if sarIsBearish
    sarColor := #ff8f8f
if sarIsBullish
    sarColor := #a0ffa3

sarPlot = plot(out, "ParabolicSAR", style=plot.style_stepline, color=sarColor)
closePlot = plot(close, "ParabolicSAR", color=#363a4500)

slowEma = ta.ema(source, slowEmaPeriod)
slowEmaIsBullish = slowEma < close
slowEmaIsBearish = slowEma > close
emaColor = color.white
if(slowEmaIsBullish)
    emaColor := #a0ffa3
if(slowEmaIsBearish)
    emaColor := #ff8f8f
emaPlot = plot(slowEma, "EMA", color=emaColor, linewidth=2)

fillColor = sarIsBullish and slowEmaIsBullish ? #a0ffa344 : sarIsBearish and slowEmaIsBearish ? #ff8f8f44 : color.new(#000000, 100)
fill(sarPlot, closePlot, fillColor, fillgaps=true)

colorLongOrder = #a0ffa3
colorShortOrder = #ff8f8f

//***************************************************************************************************************************************************************
// Operation orders
//***************************************************************************************************************************************************************
var bool killLongEntry = false
var bool killShortEntry = false
var bool longEntry = false
var bool shortEntry = false

// Entry/Out conditions
killLongEntry := sarWasBullish and sarIsBearish and slowEmaIsBullish
killShortEntry := sarWasBearish and sarIsBullish and slowEmaIsBearish
longEntry := sarWasBearish and slowEmaIsBullish
shortEntry := sarWasBullish and slowEmaIsBearish

plotshape(longEntry, style=shape.triangleup, location=location.belowbar, color=colorLongOrder, size=size.small)
plotshape(shortEntry, style=shape.triangledown, location=location.abovebar, color=colorShortOrder, size=size.small)
plotshape(killLongEntry, style=shape.xcross, location=location.abovebar, color=colorLongOrder, size=size.small)
plotshape(killShortEntry, style=shape.xcross, location=location.belowbar, color=colorShortOrder, size=size.small)

// Time parameters for testing
currentYear = input.int(2024, title="Year", step=1, group = "Time")
currentMonth = input.int(1, title="Month", step=1, group = "Time")
//if (year == 2025 and month == 1 and dayofmonth >= 6 and dayofmonth <= 7)
//if (year == currentYear and month == currentMonth)
if (true)
    // Operation nomenclature variables
    var int longOpCount = 0
    var int shortOpCount = 0
    var string longOpName = ""
    var string shortOpName = ""

    // Out operations management
    //if (killLongEntry)
    //    strategy.close(longOpName)
    //if (killShortEntry)
    //    strategy.close(shortOpName)
    if (longEntry)
        longOpCount += 1
        longOpName := "Long" + str.tostring(longOpCount)
        stopLossPrize = source - (source * (stopLossPercent / 100))
        takeProfitPrize = source + (source * (takeProfitPercent / 100))
        strategy.entry(longOpName, strategy.long)
        //strategy.exit(longOpName, longOpName, stop=stopLossPrize)
        strategy.exit(longOpName + "Exit", longOpName, stop=stopLossPrize, limit=takeProfitPrize)
    if (shortEntry)
        shortOpCount += 1
        shortOpName := "Short" + str.tostring(shortOpCount)
        stopLossPrize = source + (source * (stopLossPercent / 100))
        takeProfitPrize = source - (source * (takeProfitPercent / 100))
        strategy.entry(shortOpName, strategy.short)
        //strategy.exit(shortOpName, shortOpName, stop=stopLossPrize)
        strategy.exit(shortOpName + "Exit", shortOpName, stop=stopLossPrize, limit=takeProfitPrize)